# -*- coding: utf-8 -*-
"""
Created on Mon Dec  4 10:26:06 2023

@author: horik
"""

import pandas as pd
import numpy as np
import itertools
import matplotlib.pyplot as plt
import warnings
warnings.simplefilter('ignore')
from sklearn.neighbors import NearestNeighbors
from dcekit.generative_model import GMR
from dcekit.generative_model import VBGMR

#AD Parameter
k_in_knn = 1
ad_alpha = 0.997

#GMR Parameter
numbers_of_components = np.arange(1,51,1)
weight_concentration_prior_types = ['dirichlet_process', 'dirichlet_distribution']
weight_concentration_priors = 10 ** np.arange(-4, 2, 2, dtype=float)
covariance_types = ['full', 'diag', 'tied', 'spherical']

#Average per index
dataset = pd.read_csv('dataset.csv', index_col = 0)
dataset_new = dataset.groupby(['index']).mean()

#Delete samples
non_strength_samples = pd.DataFrame(dataset_new[dataset_new['Compressive strength (MPa)'] == -999])
non_CB_samples = pd.DataFrame(dataset_new[dataset_new['Addition amount of CB (mass%)'] == -999])
zero_CB_samples = pd.DataFrame(dataset_new[dataset_new['Addition amount of CB (mass%)'] == 0])
deleting_samples = pd.concat([non_strength_samples, non_CB_samples, zero_CB_samples])
deleting_index = deleting_number.drop_duplicates()
dataset_new = dataset_new.drop(deleting_number.index, axis=0)

"""""""""""""""""""""""""""""""""""
Create virtual sample
"""""""""""""""""""""""""""""""""""
sample = dataset_new.iloc[[0,1,2,7],:]
sample = sample.drop(sample.columns[[8,11,12,13,14,20,23,24]],axis=1)
sample = sample.drop(sample.columns[[21,22,23,27,28,29,31]],axis=1)

#Create model2 virtual sample
vegf = [0]
pig = [1]
rat = [2]
pig_weeks = [12]
rat_weeks = [2,4]

#Create BoneHAp virtual sample
molding_pressure = list(np.arange(30,60,10))
cb_150 = list(np.arange(0,1.1,0.1))
cb_mass = list(np.arange(50,750,50))

#Create virtual sample
afs_pig = list(itertools.product(cb_150,cb_mass,molding_pressure,pig,pig_weeks))
afs_pig = pd.DataFrame(afs_pig)
afs_rat = list(itertools.product(cb_150,cb_mass,molding_pressure,rat,rat_weeks))
afs_rat = pd.DataFrame(afs_rat)
afs_limit = pd.concat([afs_pig,afs_rat])
afs_limit.reset_index(drop=True, inplace=True)
afs_zero = pd.DataFrame(np.zeros((1386,33)),columns = sample.columns)
afs_zero.iloc[:,:] = sample.iloc[2,:]
afs_zero.iloc[:,12] = afs_limit.iloc[:,0]
afs_zero.iloc[:,13] = 1 - afs_zero.iloc[:,12]
afs_zero.iloc[:,14] = afs_limit.iloc[:,1]
afs_zero.iloc[:,15] = afs_limit.iloc[:,2]
afs_zero.iloc[:,18] = afs_limit.iloc[:,3]
afs_zero.iloc[:,19] = afs_limit.iloc[:,4]
tfs_zero = afs_zero.copy()
tfs_zero.iloc[:,[10,11,16,17,25,26,27,28,29,30]] = sample.iloc[3,[10,11,16,17,25,26,27,28,29,30]]

virtual_sample = pd.concat([afs_zero,tfs_zero])
virtual_sample.reset_index(drop=True, inplace=True)

"""""""""""""""""""""""""""""""""""
Dataset1
"""""""""""""""""""""""""""""""""""
#Setting x, y and autoscaling y
x = dataset_new.iloc[:,:31]

vivo_ex= pd.DataFrame(x.iloc[:,26:28])
vegf = pd.DataFrame(x.iloc[:,28])
porosity = pd.DataFrame(dataset_new.iloc[:,33])
strength = dataset_new.iloc[:,34]
material = pd.concat([porosity, strength], axis=1)
x = x.drop(vivo_ex, axis=1)

#Delete features with many unmeasured samples
x_new = x.fillna(-999)
x_new = x_new.drop(['experiment_number_of_XRD','experiment_number_of_FT-IR','VEGF(1_yes_0_no)'], axis=1)
x_new = x_new.replace(-999, 0)
x_new = x_new.drop(x_new.columns[x_new.std() == 0], axis = 1)

x_2 = pd.concat([vegf,material,vivo_ex], axis=1)
x_2 = pd.get_dummies(x_2, columns=['VEGF(1_yes_0_no)', 'Embedded animal (0_rabbit_1_pig_2_mouse)'])
y_2 = dataset_new.iloc[:,38]

"""""""""""""""""""""""""""""""""""
Dataset2 
"""""""""""""""""""""""""""""""""""
#Autoscaling
bone = pd.DataFrame(dataset_new[dataset_new['(NH4)2HPO4_mol_dm-3'] == -999])
afs = pd.DataFrame(dataset_new[dataset_new['Ca(OH)2_mol_dm-3'] == -999])

bone_x = bone.iloc[:,0:8]
bone_com_x = bone.iloc[:,17:26]
afs_x = afs.iloc[:,8:17]
afs_com_x = afs.iloc[:,17:26]

com_x = pd.concat([bone_com_x, afs_com_x], axis=0)
com_x  = pd.get_dummies(com_x, columns=['Heating atmosphere(0_air_1_in steam_2_steam and carbonate gas)'])
bone_x = bone_x.drop(bone_x.columns[bone_x.std() == 0], axis=1)
afs_x = afs_x.drop(afs_x.columns[afs_x.std() == 0], axis=1)
afs_x = afs_x.drop(['Ca(NO3)2Â·4H2O_mol_dm-3', 'HNO3_mol_dm-3'], axis=1)
com_x = com_x.drop(com_x.columns[com_x.std() == 0], axis=1)
com_x = com_x.drop(['Si concentration (mol/dm3)'], axis=1)

autoscaled_bone_x = (bone_x - bone_x.mean())/bone_x.std()
autoscaled_afs_x = (afs_x - afs_x.mean())/afs_x.std()
autoscaled_com_x = (com_x - com_x.mean())/com_x.std()
autoscaled_x_1 = pd.concat([autoscaled_bone_x,autoscaled_afs_x,autoscaled_com_x],axis=1)
autoscaled_x_1 = autoscaled_x_1.fillna(0)

bone_y = bone.iloc[:,33:35]
afs_y = afs.iloc[:,33:35]

y_1 = pd.concat([bone_y, afs_y])
autoscaled_y_1 = (y_1 - y_1.mean())/y_1.std()

"""""""""""""""""""""""""""""""""""
Construction of model1
"""""""""""""""""""""""""""""""""""
autoscaled_variables_1 = pd.concat([autoscaled_y_1, autoscaled_x_1],axis=1)

#GMR setting
numbers_of_X = list(range(len(autoscaled_y_1.columns),len(autoscaled_y_1.columns)+len(autoscaled_x_1.columns),1))
numbers_of_y = list(range(0,len(autoscaled_y_1.columns),1))
fold_number = 5

model_1 = GMR(random_state=999) 
model_1.cv_opt(autoscaled_variables_1, numbers_of_X, numbers_of_y, covariance_types, numbers_of_components, fold_number)
print('max r2cv :', model_1.r2cv)      
model_1.fit(autoscaled_variables_1)      

"""""""""""""""""""""""""""""""""""
Inverse analysis model1
"""""""""""""""""""""""""""""""""""
#Autoscaling x
virtual_bone_x = virtual_sample.iloc[:,0:8]
virtual_bone_x.iloc[:,:] = 0
virtual_afs_x = virtual_sample.iloc[:,8:12]
virtual_autoscaled_afs_x = (virtual_afs_x - afs_x.mean()) / afs_x.std()
virtual_com_x = virtual_sample.iloc[:,12:18]
virtual_com_x = pd.get_dummies(virtual_com_x, columns=['Heating atmosphere(0_air_1_in steam_2_steam and carbonate gas)'])
carbonated = pd.DataFrame(np.zeros((virtual_com_x.shape[0],1)),index = virtual_com_x.index)
virtual_com_x.insert(7,'carbonated',carbonated)
virtual_com_x.columns = com_x.columns
virtual_autoscaled_com_x = (virtual_com_x - com_x.mean())/com_x.std()

virtual_autoscaled_x_1 = pd.concat([virtual_bone_x,virtual_autoscaled_afs_x, virtual_autoscaled_com_x], axis=1)

predicted_y_1 = pd.DataFrame(model_1.predict_rep(virtual_autoscaled_x_1, numbers_of_X, numbers_of_y))
predicted_y_1.columns = y_1.columns
predicted_y_1 = predicted_y_1 * y_1.std() + y_1.mean()

#AD setting
ad_model = NearestNeighbors(n_neighbors = k_in_knn, metric='euclidean')
ad_model.fit(autoscaled_x_1)
knn_distance_between_autoscaled_x_1, knn_index_autoscaled_x_1 = ad_model.kneighbors(autoscaled_x_1, n_neighbors=k_in_knn+1)
knn_distance_between_autoscaled_x_1 = pd.DataFrame(knn_distance_between_autoscaled_x_1) 
knn_distance_between_autoscaled_x_1.index = autoscaled_x_1.index
mean_of_knn_distance_between_autoscaled_x_1 = knn_distance_between_autoscaled_x_1.iloc[:, 1:].mean(axis=1)
sorted_mean_of_knn_distance_between_autoscaled_x_1 = mean_of_knn_distance_between_autoscaled_x_1.sort_values(ascending=True)
round(autoscaled_x_1.shape[0] * ad_alpha)
ad_threshold = sorted_mean_of_knn_distance_between_autoscaled_x_1.iloc[round(autoscaled_x_1.shape[0] * ad_alpha) - 1]
 
knn_distance_between_autoscaled_x_test_1, knn_index_autoscaled_x_test_1 = ad_model.kneighbors(virtual_autoscaled_x_1)
knn_distance_between_autoscaled_x_test_1 = pd.DataFrame(knn_distance_between_autoscaled_x_test_1) 
mean_of_knn_distance_between_autoscaled_x_test_1 = knn_distance_between_autoscaled_x_test_1.mean(axis=1) 
mean_of_knn_distance_between_autoscaled_x_test_1.index = virtual_autoscaled_x_1.index

predicted_porosity = predicted_y_1.iloc[:,0]
predicted_porosity_inside_ad = predicted_porosity.loc[mean_of_knn_distance_between_autoscaled_x_test_1 <= ad_threshold]

predicted_y_1_inside_ad = predicted_y_1.loc[predicted_porosity_inside_ad.index,:]

plt.rcParams['font.size'] = 18
plt.rcParams['font.family'] = 'Times New Roman'
plt.rcParams['xtick.direction'] = 'in'
plt.rcParams['ytick.direction'] = 'in'
plt.scatter(mean_of_knn_distance_between_autoscaled_x_test_1, predicted_y_1.iloc[:,0])
plt.axvline(x=ad_threshold, color = 'k')
plt.ylim(60, 100)
plt.xlim(0, 6)
plt.xlabel('Uncertainty in model')
plt.ylabel('Porosity / %')
plt.show()

"""""""""""""""""""""""""""""""""""
Construction model2
"""""""""""""""""""""""""""""""""""
autoscaled_x_2 = (x_2 - x_2.mean())/x_2.std()
autoscaled_y_2 = (y_2 - y_2.mean())/y_2.std()

autoscaled_variables_2 = pd.concat([autoscaled_y_2, autoscaled_x_2],axis=1)

#GMR setting
numbers_of_X_2 = list(range(1,1+len(autoscaled_x_2.columns),1))
numbers_of_y_2 = list(range(0,1,1))
outer_fold_number = len(y_2)
fold_number = 5

model_2 = GMR(random_state=999)
model_2.cv_opt(autoscaled_variables_2, numbers_of_X_2, numbers_of_y_2, covariance_types, numbers_of_components, fold_number)
print('max r2cv :', model_2.r2cv)      
model_2.fit(autoscaled_variables_2)   

"""""""""""""""""""""""""""""""""""
Inverse analysis model2
"""""""""""""""""""""""""""""""""""
#Autoscaling x
virtual_x_2 = virtual_sample.iloc[:,18:21]
virtual_x_2 = virtual_x_2.loc[predicted_porosity_inside_ad.index,:]
virtual_x_2_y_1 = pd.concat([predicted_y_1_inside_ad, virtual_x_2], axis=1)

virtual_x_2_y_1 = pd.get_dummies(virtual_x_2_y_1, columns=['VEGF(1_yes_0_no)', 'Embedded animal (0_rabbit_1_pig_2_mouse)'])
vegf = pd.DataFrame(np.zeros((virtual_x_2.shape[0],1)),index = virtual_x_2_y_1.index)

virtual_x_2_y_1.insert(4, 'VEGF', vegf)
virtual_x_2_y_1.columns = x_2.columns
virtual_autoscaled_x_2_y_1 = (virtual_x_2_y_1 - x_2.mean())/x_2.std()

predicted_y_2 = model_2.predict_rep(virtual_autoscaled_x_2_y_1, numbers_of_X_2, numbers_of_y_2)
predicted_y_2 = predicted_y_2 * y_2.std() + y_2.mean()

#AD
ad_model_2 = NearestNeighbors(n_neighbors = k_in_knn, metric='euclidean')
ad_model_2.fit(autoscaled_x_2)
knn_distance_between_autoscaled_x_2, knn_index_autoscaled_x_2 = ad_model_2.kneighbors(autoscaled_x_2, n_neighbors=k_in_knn+1)
knn_distance_between_autoscaled_x_2 = pd.DataFrame(knn_distance_between_autoscaled_x_2) 
knn_distance_between_autoscaled_x_2.index = x_2.index
mean_of_knn_distance_between_autoscaled_x_2 = knn_distance_between_autoscaled_x_2.iloc[:, 1:].mean(axis=1)
sorted_mean_of_knn_distance_between_autoscaled_x_2 = mean_of_knn_distance_between_autoscaled_x_2.sort_values(ascending=True)
round(autoscaled_x_2.shape[0] * ad_alpha)
ad_threshold = sorted_mean_of_knn_distance_between_autoscaled_x_2.iloc[round(autoscaled_x_2.shape[0] * ad_alpha) - 1]

knn_distance_between_autoscaled_x_test, knn_index_autoscaled_x_test = ad_model_2.kneighbors(virtual_autoscaled_x_2_y_1)
knn_distance_between_autoscaled_x_test = pd.DataFrame(knn_distance_between_autoscaled_x_test) 
mean_of_knn_distance_between_autoscaled_x_test = knn_distance_between_autoscaled_x_test.mean(axis=1) 
mean_of_knn_distance_between_autoscaled_x_test.index = virtual_autoscaled_x_2_y_1.index

plt.scatter(mean_of_knn_distance_between_autoscaled_x_test, predicted_y_2)
plt.axvline(x=ad_threshold, color = 'k')
plt.ylim(0, 100)
plt.xlim(0, 5)
plt.xlabel('Uncertainty in model')
plt.ylabel('Bone-formation rate / %')
plt.show()

predicted_bone_formation = pd.DataFrame(predicted_y_2)
predicted_bone_formation.index = virtual_x_2.index
predicted_bone_formation_inside_ad = predicted_bone_formation.loc[mean_of_knn_distance_between_autoscaled_x_test <= ad_threshold]

predicted_y_2_inside_ad = predicted_bone_formation.loc[predicted_bone_formation_inside_ad.index,:]
predicted_y_1_inside_ad_2 = predicted_y_1_inside_ad.loc[predicted_bone_formation_inside_ad.index, :]
inverse_result = virtual_sample.loc[predicted_bone_formation_inside_ad.index,:]
inverse_result_inside_ad = inverse_result.iloc[:,0:25]
inverse_result_inside_ad.iloc[:,22:24] = predicted_y_1_inside_ad
inverse_result_inside_ad.iloc[:,21] = 100 - inverse_result_inside_ad.iloc[:,22]
inverse_result_inside_ad.iloc[:,24] = predicted_bone_formation_inside_ad 
inverse_result_inside_ad.to_csv('gmr_inverse_result_inside_ad.csv') 
